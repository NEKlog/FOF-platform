// ----- generator + datasource -----
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ----- ENUMS (eksisterende) -----
enum TaskStatus {
  NEW
  PLANNED
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum CarrierDocType {
  INSURANCE
  LICENSE
  CVR
  OTHER
}

enum TxType {
  TASK_PRICE
  COMMISSION
  CARRIER_EARNED
  PAYOUT
}

enum BookingCategory {
  MOVING
  FURNITURE
  PARCEL
  PALLET_LTL
  FTL
  FREIGHT
}

// ----- ENUMS (NYE til booking) -----
enum ServiceLevel {
  CURBSIDE
  DRIVER_HELP
  TWO_MEN
}

enum ParkingDistance {
  D0_20
  D21_50
  D51_100
  OVER_100
}

enum BigItemBucket {
  I0_5
  I6_10
  I11_20
  I21_30
  I31_50
  OVER_50
}

enum BoxesBucket {
  B1_10
  B11_20
  B21_30
  B31_40
  B41_50
  B51_70
  B71_100
  B101_200
  OVER_200
}

enum ItemType {
  PARCEL
  PALLET
  FURNITURE
  OTHER
}

// ----- MODELS -----
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String
  approved  Boolean  @default(false)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  tasksAsCustomer Task[]            @relation("CustomerTasks")
  tasksAsCarrier  Task[]            @relation("CarrierTasks")
  bidsAsCarrier   Bid[]             @relation("CarrierBids")
  carrierDocs     CarrierDocument[]

  // chat
  messagesFrom Message[] @relation("MessagesFrom")
  messagesTo   Message[] @relation("MessagesTo")

  // admin publish (back-rel)
  publishedTasks Task[] @relation("PublishedBy")

  // reset tokens
  passwordResetTokens PasswordResetToken[]

  // whitelist back-rel
  whitelist TaskCarrierWhitelist[]
}

model Task {
  id     Int        @id @default(autoincrement())
  title  String
  status TaskStatus @default(NEW)
  paid   Boolean    @default(false)

  price         Float?
  commissionPct Float?
  pickup        String?
  dropoff       String?
  scheduledAt   DateTime?

  // === Bookingstruktur ===
  category BookingCategory?
  service  ServiceLevel?

  // Afhentning (A)
  pickupLabel    String?
  pickupLat      Float?
  pickupLon      Float?
  pickupFrom     DateTime?
  pickupTo       DateTime?
  pickupFloor    Int?
  pickupElevator Boolean          @default(false)
  pickupParking  ParkingDistance?
  pickupAreaM2   Int?
  pickupStorage  Boolean          @default(false)
  contactAName   String?
  contactAPhone  String?

  // Levering (B)
  dropoffLabel    String?
  dropoffLat      Float?
  dropoffLon      Float?
  dropoffFrom     DateTime?
  dropoffTo       DateTime?
  dropoffFloor    Int?
  dropoffElevator Boolean          @default(false)
  dropoffParking  ParkingDistance?
  dropoffAreaM2   Int?
  dropoffStorage  Boolean          @default(false)
  contactBName    String?
  contactBPhone   String?

  // Flytning-specifikt
  heavyOver70 Boolean        @default(false)
  bigItems    BigItemBucket?
  boxes       BoxesBucket?

  // Publicerings-/aktiveringsflow
  requiresActivation Boolean   @default(true)
  activationToken    String?   @unique
  activationExpires  DateTime?

  isPublished   Boolean   @default(false)
  visibleAfter  DateTime?
  publishedAt   DateTime?
  publishedById Int?
  publishedBy   User?     @relation("PublishedBy", fields: [publishedById], references: [id])

  // Relationer
  customerId Int?
  customer   User? @relation("CustomerTasks", fields: [customerId], references: [id])

  carrierId Int?
  carrier   User? @relation("CarrierTasks", fields: [carrierId], references: [id])

  bids         Bid[]
  review       Review?
  messages     Message[]
  transactions Transaction[]

  // Varelinjer + whitelist
  items     TaskItem[]
  whitelist TaskCarrierWhitelist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id      Int       @id @default(autoincrement())
  amount  Float
  message String?
  status  BidStatus @default(PENDING)

  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  carrierId Int
  carrier   User @relation("CarrierBids", fields: [carrierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([carrierId])
}

model CarrierDocument {
  id         Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       CarrierDocType
  url        String
  filename   String?
  verified   Boolean        @default(false)
  notes      String?
  uploadedAt DateTime       @default(now())

  @@index([userId])
}

model Review {
  id         Int      @id @default(autoincrement())
  taskId     Int      @unique
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  customerId Int
  carrierId  Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  @@index([customerId])
  @@index([carrierId])
}

model Message {
  id     Int  @id @default(autoincrement())
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  fromId Int
  from   User @relation("MessagesFrom", fields: [fromId], references: [id], onDelete: Cascade)

  toId Int
  to   User @relation("MessagesTo", fields: [toId], references: [id], onDelete: Cascade)

  body      String
  createdAt DateTime @default(now())

  @@index([taskId])
  @@index([fromId])
  @@index([toId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  carrierId Int?
  type      TxType
  amount    Int
  createdAt DateTime @default(now())

  @@index([taskId])
  @@index([carrierId])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, expiresAt])
}

// --- NYT: varelinjer
model TaskItem {
  id          Int      @id @default(autoincrement())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  type        ItemType
  description String?
  lengthCm    Int?
  widthCm     Int?
  heightCm    Int?
  weightKg    Int?
  count       Int      @default(1)

  @@index([taskId])
}

// --- NYT: whitelist (synlighed/udvalgte carriers)
model TaskCarrierWhitelist {
  taskId    Int
  carrierId Int
  task      Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  carrier   User @relation(fields: [carrierId], references: [id], onDelete: Cascade)

  @@id([taskId, carrierId])
  @@index([carrierId])
}
